<div id="cha-user_microposts" data-tralics-id="cid73" class="chapter" data-number="13" data-chapter="user_microposts"><h1><a href="user_microposts_fragment.html#cha-user_microposts" class="heading hyperref"><span class="number">Chapter 13 </span>User microposts</a></h1>
<p>In the course of developing the core sample application, we’ve now encountered four resources—users, sessions, account activations, and password resets—but only the first of these is backed by an Active Record model with a table in the database.<span class="intersentencespace"></span> The time has finally come to add a second such resource: user <em>microposts</em>, which are short messages associated with a particular user.<sup id="cha-13_footnote-ref-1" class="footnote"><a href="#cha-13_footnote-1">1</a></sup><span class="intersentencespace"></span> We first saw microposts in larval form in <a href="toy_app_fragment.html#cha-a_toy_app" class="hyperref">Chapter <span class="ref">2</span></a>, and in this chapter we will make a full-strength version of the sketch from <a href="toy_app_fragment.html#sec-microposts_resource" class="hyperref">Section <span class="ref">2.3</span></a> by constructing the Micropost data model, associating it with the User model using the <code>has_many</code> and <code>belongs_to</code> methods, and then making the forms and partials needed to manipulate and display the results (including, in <a href="user_microposts_fragment.html#sec-micropost_images" class="hyperref">Section <span class="ref">13.4</span></a>, uploaded images).<span class="intersentencespace"></span> In <a href="following_users_fragment.html#cha-following_users" class="hyperref">Chapter <span class="ref">14</span></a>, we’ll complete our tiny Twitter clone by adding the notion of <em>following</em> users in order to receive a <em>feed</em> of their microposts.</p>
</div><div id="sec-a_micropost_model" data-tralics-id="cid74" class="section" data-number="13.1"><h2><a href="user_microposts_fragment.html#sec-a_micropost_model" class="heading hyperref"><span class="number">13.1 </span>A Micropost model</a></h2>
<p>We begin the Microposts resource by creating a Micropost model, which captures the essential characteristics of microposts.<span class="intersentencespace"></span> What follows builds on the work from <a href="toy_app_fragment.html#sec-microposts_resource" class="hyperref">Section <span class="ref">2.3</span></a>; as with the model in that section, our new Micropost model will include data validations and an association with the User model.<span class="intersentencespace"></span> Unlike that model, the present Micropost model will be fully tested, and will also have a default <em>ordering</em> and automatic <em>destruction</em> if its parent user is destroyed.</p>
<p>If you’re using Git for version control, I suggest making a topic branch at this time:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> git checkout -b user-microposts
</pre></div></div>
<div id="sec-the_basic_model" data-tralics-id="uid1558" class="subsection" data-number="13.1.1"><h3><a href="user_microposts_fragment.html#sec-the_basic_model" class="heading hyperref"><span class="number">13.1.1 </span>The basic model</a></h3>
<p>The Micropost model needs only two attributes: a <code>content</code> attribute to hold the micropost’s content and a <code>user_id</code> to associate a micropost with a particular user.<span class="intersentencespace"></span> The result is a Micropost model with the structure shown in <a href="user_microposts_fragment.html#fig-micropost_model" class="hyperref">Figure <span class="ref">13.1</span></a>.</p>
<div class="center figure" id="fig-micropost_model" data-tralics-id="uid1559" data-number="13.1">
<div class="graphics image"><img src="images/figures/micropost_model_3rd_edition.png" alt="images/figures/micropost_model_3rd_edition"></div><div class="caption"><span class="header">Figure 13.1: </span><span class="description">The Micropost data model.
</span></div></div>
<p>It’s worth noting that the model in <a href="user_microposts_fragment.html#fig-micropost_model" class="hyperref">Figure <span class="ref">13.1</span></a> uses the <code>text</code> data type for micropost content (instead of <code>string</code>), which is capable of storing an arbitrary amount of text.<span class="intersentencespace"></span> Even though the content will be restricted to fewer than 140 characters (<a href="user_microposts_fragment.html#sec-micropost_validations" class="hyperref">Section <span class="ref">13.1.2</span></a>) and hence would fit inside the 255-character <code>string</code> type, using <code>text</code> better expresses the nature of microposts, which are more naturally thought of as blocks of text.<span class="intersentencespace"></span> Indeed, in <a href="user_microposts_fragment.html#sec-creating_microposts" class="hyperref">Section <span class="ref">13.3.2</span></a> we’ll use a text <em>area</em> instead of a text field for submitting microposts.<span class="intersentencespace"></span> In addition, using <code>text</code> gives us greater flexibility should we wish to increase the length limit at a future date (as part of internationalization, for example).<span class="intersentencespace"></span> Finally, using the <code>text</code> type results in <a href="http://www.postgresql.org/docs/9.1/static/datatype-character.html" target="_blank" rel="noopener">no performance difference</a> in production,<sup id="cha-13_footnote-ref-2" class="footnote"><a href="#cha-13_footnote-2">2</a></sup> so it costs us nothing to use it here.</p>
<p>As with the case of the User model (<a href="modeling_users_fragment.html#code-generate_user_model" class="hyperref">Listing <span class="ref">6.1</span></a>), we generate the Micropost model using <code>generate model</code> (<a href="user_microposts_fragment.html#code-generate_micropost_model" class="hyperref">Listing <span class="ref">13.1</span></a>).</p>
<div class="codelisting" id="code-generate_micropost_model" data-tralics-id="uid1561" data-number="13.1"><div class="heading"><span class="number">Listing 13.1:</span> 

<span class="description">Generating the Micropost model.</span>
</div>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> rails generate model Micropost content:text user:references
</pre></div></div></div><p>This migration leads to the creation of the Micropost model shown in <a href="user_microposts_fragment.html#code-micropost_model" class="hyperref">Listing <span class="ref">13.2</span></a>.<span class="intersentencespace"></span> In addition to inheriting from <code>ApplicationRecord</code> as usual (<a href="modeling_users_fragment.html#sec-the_model_file" class="hyperref">Section <span class="ref">6.1.2</span></a>), the generated model includes a line indicating that a micropost <code>belongs_to</code> a user, which is included as a result of the <code>user:references</code> argument in <a href="user_microposts_fragment.html#code-generate_micropost_model" class="hyperref">Listing <span class="ref">13.1</span></a>.<span class="intersentencespace"></span> We’ll explore the implications of this line in <a href="user_microposts_fragment.html#sec-user_micropost_associations" class="hyperref">Section <span class="ref">13.1.3</span></a>.</p>
<div class="codelisting" id="code-micropost_model" data-tralics-id="uid1562" data-number="13.2"><div class="heading"><span class="number">Listing 13.2:</span> 

<span class="description">The generated Micropost model.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">app/models/micropost.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Micropost</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
   <span class="n">belongs_to</span> <span class="ss">:user</span>
<span class="k">end</span>
</pre></div></div></div><p>The <code>generate</code> command in <a href="user_microposts_fragment.html#code-generate_micropost_model" class="hyperref">Listing <span class="ref">13.1</span></a> also produces a migration to create a <code>microposts</code> table in the database (<a href="user_microposts_fragment.html#code-micropost_migration" class="hyperref">Listing <span class="ref">13.3</span></a>); compare it to the analogous migration for the <code>users</code> table from <a href="modeling_users_fragment.html#code-users_migration" class="hyperref">Listing <span class="ref">6.2</span></a>.<span class="intersentencespace"></span> The biggest difference is the use of <code>references</code>, which automatically adds a <code>user_id</code> column (along with an index and a foreign key reference)<sup id="cha-13_footnote-ref-3" class="footnote"><a href="#cha-13_footnote-3">3</a></sup> for use in the user/micropost association.<span class="intersentencespace"></span> As with the User model, the Micropost model migration automatically includes the <code>t.timestamps</code> line, which (as mentioned in <a href="modeling_users_fragment.html#sec-database_migrations" class="hyperref">Section <span class="ref">6.1.1</span></a>) adds the magic <code>created_at</code> and <code>updated_at</code> columns shown in <a href="user_microposts_fragment.html#fig-micropost_model" class="hyperref">Figure <span class="ref">13.1</span></a>.<span class="intersentencespace"></span> (We’ll put the <code>created_at</code> column to work starting in <a href="user_microposts_fragment.html#sec-ordering_and_dependency" class="hyperref">Section <span class="ref">13.1.4</span></a>.)</p>
<div class="codelisting" id="code-micropost_migration" data-tralics-id="uid1564" data-number="13.3"><div class="heading"><span class="number">Listing 13.3:</span> 

<span class="description">The Micropost migration with added index.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">db/migrate/[timestamp]_create_microposts.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">CreateMicroposts</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span><span class="o">[</span><span class="mi">5</span><span class="o">.</span><span class="mi">0</span><span class="o">]</span>
  <span class="k">def</span> <span class="nf">change</span>
    <span class="n">create_table</span> <span class="ss">:microposts</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
      <span class="n">t</span><span class="o">.</span><span class="n">text</span> <span class="ss">:content</span>
      <span class="n">t</span><span class="o">.</span><span class="n">references</span> <span class="ss">:user</span><span class="p">,</span> <span class="ss">foreign_key</span><span class="p">:</span> <span class="kp">true</span>

      <span class="n">t</span><span class="o">.</span><span class="n">timestamps</span>
    <span class="k">end</span>
<span class="hll">    <span class="n">add_index</span> <span class="ss">:microposts</span><span class="p">,</span> <span class="o">[</span><span class="ss">:user_id</span><span class="p">,</span> <span class="ss">:created_at</span><span class="o">]</span>
</span>  <span class="k">end</span>
<span class="k">end</span>
</pre></div></div></div><p>Because we expect to retrieve all the microposts associated with a given user id in reverse order of creation, <a href="user_microposts_fragment.html#code-micropost_migration" class="hyperref">Listing <span class="ref">13.3</span></a> adds an index (<a href="modeling_users_fragment.html#aside-database_indices" class="hyperref">Box <span class="ref">6.2</span></a>) on the <code>user_id</code> and <code>created_at</code> columns:</p>
<div class="code"><div class="highlight"><pre><span class="n">add_index</span> <span class="ss">:microposts</span><span class="p">,</span> <span class="o">[</span><span class="ss">:user_id</span><span class="p">,</span> <span class="ss">:created_at</span><span class="o">]</span>
</pre></div></div>
<p>By including both the <code>user_id</code> and <code>created_at</code> columns as an array, we arrange for Rails to create a <em>multiple key index</em>, which means that Active Record uses <em>both</em> keys at the same time.</p>
<p>With the migration in <a href="user_microposts_fragment.html#code-micropost_migration" class="hyperref">Listing <span class="ref">13.3</span></a>, we can update the database as usual:</p>
<div class="code"><div class="highlight"><pre>$ rails db:migrate
</pre></div></div>
<div id="sec-exercises_the_basic_model" data-tralics-id="uid1565" class="subsubsection" data-number="13.1.1.1"><h4><a href="#sec-exercises_the_basic_model" class="heading">Exercises</a></h4>
 <div class="society-note">
<p>Solutions to exercises are available for free at <a href="http://railstutorial.org/solutions" target="_blank" rel="noopener">railstutorial.org/solutions</a> with any Rails Tutorial purchase.<span class="intersentencespace"></span> To see other people’s answers and to record your own, join the <a href="http://learnenough.com/society" target="_blank" rel="noopener">Learn Enough Society</a> at <a href="http://learnenough.com/society" target="_blank" rel="noopener">learnenough.com/society</a>.<span class="intersentencespace"></span>  </p></div>
<ol>
<li>Using <code>Micropost.new</code> in the console, instantiate a new Micropost object called <code>micropost</code> with content “Lorem ipsum” and user id equal to the id of the first user in the database.<span class="intersentencespace"></span> What are the values of the magic columns <code>created_at</code> and <code>updated_at</code>? <span class="exercise" id="ex-e34987"></span>
</li>
<li>What is <code>micropost.user</code> for the micropost in the previous exercise?<span class="intersentencespace"></span> What about <code>micropost.user.name</code>? <span class="exercise" id="ex-4d1441"></span>
</li>
<li>Save the micropost to the database.<span class="intersentencespace"></span> What are the values of the magic columns now? <span class="exercise" id="ex-7d471e"></span>
</li></ol>
</div></div>
<div id="sec-micropost_validations" data-tralics-id="uid1569" class="subsection" data-number="13.1.2"><h3><a href="user_microposts_fragment.html#sec-micropost_validations" class="heading hyperref"><span class="number">13.1.2 </span>Micropost validations</a></h3>
<p>Now that we’ve created the basic model, we’ll add some validations to enforce the desired design constraints.<span class="intersentencespace"></span> One of the necessary aspects of the Micropost model is the presence of a user id to indicate which user made the micropost.<span class="intersentencespace"></span> The idiomatically correct way to do this is to use Active Record <em>associations</em>, which we’ll implement in <a href="user_microposts_fragment.html#sec-user_micropost_associations" class="hyperref">Section <span class="ref">13.1.3</span></a>, but for now we’ll work with the <code>Micropost</code> model directly.</p>
<p>The initial micropost tests parallel those for the User model (<a href="modeling_users_fragment.html#code-name_presence_test" class="hyperref">Listing <span class="ref">6.7</span></a>).<span class="intersentencespace"></span> In the <code>setup</code> step, we create a new micropost while associating it with a valid user from the fixtures, and then check that the result is valid.<span class="intersentencespace"></span> Because every micropost should have a user id, we’ll add a test for a <code>user_id</code> presence validation.<span class="intersentencespace"></span> Putting these elements together yields the test in <a href="user_microposts_fragment.html#code-micropost_validity_test" class="hyperref">Listing <span class="ref">13.4</span></a>.</p>
<div class="codelisting" id="code-micropost_validity_test" data-tralics-id="uid1570" data-number="13.4"><div class="heading"><span class="number">Listing 13.4:</span> 

<span class="description">Tests for the validity of a new micropost.<span class="intersentencespace"></span> <span style="color: ForestGreen"><span class="sc"></span><span class="sc"><strong>green</strong></span><span class="sc"></span></span><span class="break"></span> <span class="filepath">test/models/micropost_test.rb</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">'test_helper'</span>

<span class="k">class</span> <span class="nc">MicropostTest</span> <span class="o">&lt;</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">TestCase</span>

  <span class="k">def</span> <span class="nf